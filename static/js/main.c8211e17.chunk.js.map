{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","Fragment","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","toggleMode","role","checked","htmlFor","TextForm","text","setText","useState","fontStyle","setFontStyle","downloadStyledTextFile","filename","blob","Blob","link","document","download","window","URL","createObjectURL","style","fontFamily","click","revokeObjectURL","charCount","wordCount","sentenceCount","lineCount","length","split","filter","word","sentence","trim","calculateCounts","heading","value","onChange","e","target","rows","event","handleUpClick","newText","toUpperCase","handleLoClick","toLowerCase","handleCapitalizeClick","map","charAt","slice","join","handleClearClick","handleExtraSpace","handleCopyClick","textArea","getElementById","select","navigator","clipboard","writeText","handleDownloadClick","App","setMode","useEffect","body","backgroundColor","color","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.c8211e17.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\r\n              </li>\r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n              <input \r\n                className=\"form-check-input\" \r\n                onClick={props.toggleMode} \r\n                type=\"checkbox\" \r\n                role=\"switch\" \r\n                id=\"flexSwitchCheckChecked\" \r\n                checked={props.mode === 'dark'} // Dynamically manage checked state\r\n              />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckChecked\">\r\n                Enable Dark or Light\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  aboutText: PropTypes.string,\r\n  mode: PropTypes.string.isRequired,\r\n  toggleMode: PropTypes.func.isRequired,\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n  const [fontStyle, setFontStyle] = useState(\"\");\r\n  // const [selectedFile, setSelectedFile] = useState(null);\r\n  // const [convertedWebP, setConvertedWebP] = useState(null);\r\n  // const [imageName, setImageName] = useState(\"\");\r\n\r\n  // Text Manipulation Handlers\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    setText(\"\");\r\n  };\r\n\r\n  const handleCopyClick = () => {\r\n    let textArea = document.getElementById(\"exampleFormControlTextarea1\");\r\n    textArea.select();\r\n    navigator.clipboard.writeText(textArea.value);\r\n  };\r\n\r\n  const handleCapitalizeClick = () => {\r\n    let newText = text\r\n      .toLowerCase()\r\n      .split(\" \")\r\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(\" \");\r\n    setText(newText);\r\n  };\r\n\r\n  const handleExtraSpace = () => {\r\n    let newText = text.split(/[ ]+/).join(\" \");\r\n    setText(newText);\r\n  };\r\n\r\n  \r\n// download file\r\nconst handleDownloadClick = () => {\r\n  const filename = \"downloaded_text.word\";\r\n   downloadStyledTextFile(filename, text, fontStyle);\r\n  };\r\n\r\n  const handleFontStyleChange = (event) => {\r\n    setFontStyle(event.target.value);\r\n  };\r\n\r\n  const downloadStyledTextFile = (filename, text, fontStyle) => {\r\n    const blob = new Blob([text], { type: 'text/plain' });\r\n    const link = document.createElement('a');\r\n    link.download = filename;\r\n    link.href = window.URL.createObjectURL(blob);\r\n    link.style.fontFamily = fontStyle;\r\n    link.click();\r\n    window.URL.revokeObjectURL(link.href);\r\n   }\r\n  \r\n\r\n  const calculateCounts = (text) => {\r\n    const charCount = text.length;\r\n    const wordCount = text.split(/\\s+/).filter((word) => word.length > 0).length;\r\n    const sentenceCount = text.split(/[.!?]+/).filter((sentence) => sentence.trim().length > 0).length;\r\n    const lineCount = text.split(/\\n/).length;\r\n    return { charCount, wordCount, sentenceCount, lineCount };\r\n  };\r\n\r\n  const { charCount, wordCount, sentenceCount, lineCount } = calculateCounts(text);\r\n\r\n  // Image to WebP Handlers\r\n  // const handleFileChange = (event) => {\r\n  //   const file = event.target.files[0];\r\n  //   if (!file) {\r\n  //     alert(\"Please select an image file.\");\r\n  //     return;\r\n  //   }\r\n  //   setSelectedFile(file);\r\n  //   setImageName(file.name.split(\".\")[0]);\r\n  // };\r\n\r\n  // const handleConvert = () => {\r\n  //   if (!selectedFile) {\r\n  //     alert(\"No file selected. Please choose a file to convert.\");\r\n  //     return;\r\n  //   }\r\n  //   convertImageToWebP(selectedFile);\r\n  // };\r\n\r\n  // const convertImageToWebP = (file) => {\r\n  //   const reader = new FileReader();\r\n  //   const img = new Image();\r\n\r\n  //   reader.onload = (e) => {\r\n  //     img.src = e.target.result;\r\n  //   };\r\n\r\n  //   img.onload = () => {\r\n  //     const canvas = document.createElement(\"canvas\");\r\n  //     const ctx = canvas.getContext(\"2d\");\r\n  //     canvas.width = img.width;\r\n  //     canvas.height = img.height;\r\n  //     ctx.drawImage(img, 0, 0);\r\n\r\n  //     canvas.toBlob(\r\n  //       (blob) => {\r\n  //         if (blob) {\r\n  //           setConvertedWebP(URL.createObjectURL(blob));\r\n  //         } else {\r\n  //           alert(\"Failed to convert image to WebP.\");\r\n  //         }\r\n  //       },\r\n  //       \"image/webp\",\r\n  //       0.8\r\n  //     );\r\n  //   };\r\n\r\n  //   reader.readAsDataURL(file);\r\n  // };\r\n\r\n  // const downloadWebP = () => {\r\n  //   const link = document.createElement(\"a\");\r\n  //   link.href = convertedWebP;\r\n  //   link.download = `${imageName}.webp`;\r\n  //   link.click();\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={(e) => setText(e.target.value)}\r\n            style={{ fontFamily: fontStyle }}\r\n            id=\"exampleFormControlTextarea1\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"fontStyleSelect\">Choose font style:</label>\r\n          <select id=\"fontStyleSelect\" onChange={handleFontStyleChange} className=\"form-select\">\r\n            <option value=\"cursive\">Cursive</option>\r\n            <option value=\"Arial\">Arial</option>\r\n            <option value=\"Times New Roman\">Times New Roman</option>\r\n            <option value=\"Verdana\">Verdana</option>\r\n            <option value=\"Monospace\">Monospace</option>\r\n          </select>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2 my-2\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2 my-2\" onClick={handleLoClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2 my-2\" onClick={handleCapitalizeClick}>\r\n          Capitalize Case\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2 my-2\" onClick={handleClearClick}>\r\n          Clear text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2 my-2\" onClick={handleExtraSpace}>\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2 my-2\" onClick={handleCopyClick}>\r\n          Copy to Clipboard\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2 my-2\" onClick={handleDownloadClick}>\r\n          Download text\r\n          </button>\r\n          <div className=\"container my-3\">\r\n        <h1>Your text summary</h1>\r\n        <p>\r\n          Character Count: {charCount} | Word Count: {wordCount} | Sentence Count: {sentenceCount} | Line Count:{\" \"}\r\n          {lineCount}\r\n        </p>\r\n        <p>{0.008 * text.split(\"\").length} minutes read</p>\r\n        <h3 style={{ fontFamily: fontStyle }}>{text}</h3>\r\n      </div>\r\n          \r\n        {/* <div className=\"container my-4\">\r\n          <h2>Image to WebP Converter</h2>\r\n          <input\r\n            type=\"file\"\r\n            accept=\"image/png, image/jpeg, image/svg+xml\"\r\n            className=\"form-control my-4 mx-4 \"\r\n            onChange={handleFileChange}\r\n          />\r\n          <button className=\"btn btn-primary mx-2 my-2\" onClick={handleConvert}>\r\n            Convert to WebP\r\n          </button>\r\n          {convertedWebP && (\r\n            <>\r\n              <img src={convertedWebP} alt=\"Converted WebP\" className=\"img-fluid\" />\r\n              <button className=\"btn btn-success my-2 mx-2\" onClick={downloadWebP}>\r\n                Download WebP\r\n              </button>\r\n            </>\r\n          )}\r\n        </div> */}\r\n      </div>\r\n      \r\n    </>\r\n  );\r\n}\r\n","/* eslint-disable no-const-assign */\n/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n// import About from './Components/About'; // Remove if not used\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\n// import ImageToWebPConverter from './Components/ImageToWebPConverter'; // Corrected the component name\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n// import AdvancedImageConverter from './Components/ImageToWebPConverter';\nfunction App() {\n  const [mode, setMode] = useState('dark'); // Corrected mode state initialization to lowercase\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'black';\n      document.body.style.color = 'white'; // Change text color for dark mode\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black'; // Change text color for light mode\n    }\n  };\n\n  // Set initial background color and text color based on the mode\n  useEffect(() => {\n    document.body.style.backgroundColor = mode === 'dark' ? 'black' : 'white';\n    document.body.style.color = mode === 'dark' ? 'white' : 'black';\n  }, [mode]);\n\n  return (\n    <>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <div className=\"container my-3\">\n        <TextForm heading=\"Enter the text to Analyze below\" />\n        {/* <ImageToWebPConverter /> */}\n        {/* <AdvancedImageConverter /> */}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}