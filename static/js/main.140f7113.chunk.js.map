{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","Fragment","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","toggleMode","role","checked","htmlFor","TextForm","text","setText","useState","findText","setFindText","replaceText","setReplaceText","paragraphCount","setParagraphCount","isListening","setIsListening","targetLanguage","setTargetLanguage","handleSortWordsClick","order","words","split","filter","word","length","sort","a","b","localeCompare","join","charCount","wordCount","sentenceCount","lineCount","sentence","trim","calculateCounts","heading","value","onChange","e","target","rows","handleFindAndReplaceClick","alert","newText","replaceAll","placeholder","min","paragraphs","arguments","undefined","generatedText","Array","fill","handleGenerateLoremIpsumClick","async","response","fetch","method","headers","Content-Type","body","JSON","stringify","q","source","format","data","json","translatedText","error","console","handleUpClick","toUpperCase","handleLoClick","toLowerCase","handleTitleCaseClick","map","charAt","slice","handleScrambleWordsClick","Math","random","handleRemoveNumbersClick","replace","handleCapitalizeClick","handleRepeatedWordsClick","wordCounts","reduce","acc","repeatedWords","Object","entries","_ref","count","_ref2","handleSpeechToTextClick","window","recognition","SpeechRecognition","webkitSpeechRecognition","lang","interimResults","continuous","onstart","onend","onerror","event","onresult","speechText","results","transcript","prevText","start","handleRepeatedCharactersClick","charCounts","char","repeatedChars","_ref3","_ref4","handleClearClick","handleExtraSpace","handleCopyClick","textArea","document","getElementById","select","navigator","clipboard","writeText","handleSpeakClick","utterance","SpeechSynthesisUtterance","rate","speechSynthesis","speak","App","setMode","useEffect","style","backgroundColor","color","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.140f7113.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default function Navbar(props) {\n  return (\n    <>\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n        <div className=\"container-fluid\">\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              <li className=\"nav-item\">\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\n              </li>\n            </ul>\n            <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\n              <input \n                className=\"form-check-input\" \n                onClick={props.toggleMode} \n                type=\"checkbox\" \n                role=\"switch\" \n                id=\"flexSwitchCheckChecked\" \n                checked={props.mode === 'dark'} // Dynamically manage checked state\n              />\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckChecked\">\n                Enable Dark or Light\n              </label>\n            </div>\n          </div>\n        </div>\n      </nav>\n    </>\n  )\n}\n\nNavbar.propTypes = {\n  title: PropTypes.string,\n  aboutText: PropTypes.string,\n  mode: PropTypes.string.isRequired,\n  toggleMode: PropTypes.func.isRequired,\n}\n","import React, { useState } from \"react\";\n\nexport default function TextForm(props) {\n  const [text, setText] = useState(\"\");\n  const [findText, setFindText] = useState(\"\");\n  const [replaceText, setReplaceText] = useState(\"\");\n  const [paragraphCount, setParagraphCount] = useState(1);\n  const [isListening, setIsListening] = useState(false);\n  const [targetLanguage, setTargetLanguage] = useState(\"es\");\n\n\n  // const [selectedFile, setSelectedFile] = useState(null);\n  // const [convertedWebP, setConvertedWebP] = useState(null);\n  // const [imageName, setImageName] = useState(\"\");\n// const [fontStyle, setFontStyle] = useState(\"\");\n  // Text Manipulation Handlers\n\n  const handleUpClick = () => {\n    let newText = text.toUpperCase();\n    setText(newText);\n  };\n\n  const handleLoClick = () => {\n    let newText = text.toLowerCase();\n    setText(newText);\n  };\n\n  const handleSpeechToTextClick = () => {\n    if (\n      !(\"webkitSpeechRecognition\" in window || \"SpeechRecognition\" in window)\n    ) {\n      alert(\"Speech-to-Text is not supported in this browser.\");\n      return;\n    }\n\n    const SpeechRecognition =\n      window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n\n    recognition.lang = \"en-US\"; // Set the language\n    recognition.interimResults = false; // Only return final results\n    recognition.continuous = false; // Stop after one result\n\n    recognition.onstart = () => {\n      setIsListening(true);\n    };\n\n    recognition.onend = () => {\n      setIsListening(false);\n    };\n\n    recognition.onerror = (event) => {\n      alert(`Error occurred: ${event.error}`);\n      setIsListening(false);\n    };\n\n    recognition.onresult = (event) => {\n      const speechText = event.results[0][0].transcript;\n      setText((prevText) => `${prevText} ${speechText}`); // Append the recognized speech to the existing text\n    };\n\n    recognition.start();\n  };\n\n  const handleTranslateClick = async () => {\n    if (text.trim() === \"\") {\n      alert(\"Please enter text to translate.\");\n      return;\n    }\n  \n    try {\n      const response = await fetch(\"https://libretranslate.com/translate\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          q: text,\n          source: \"en\", // Default source language (English)\n          target: targetLanguage,\n          format: \"text\",\n        }),\n      });\n      const data = await response.json();\n      setText(data.translatedText); // Update text with the translated text\n    } catch (error) {\n      console.error(\"Translation failed:\", error);\n      alert(\"Failed to translate text. Please try again.\");\n    }\n  };\n\n  const handleGenerateLoremIpsumClick = (paragraphs = 1) => {\n    const loremIpsum =\n      \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\";\n    const generatedText = Array(paragraphs).fill(loremIpsum).join(\"\\n\\n\");\n    setText(generatedText);\n  };\n\n  const handleFindAndReplaceClick = () => {\n    if (findText.trim() === \"\") {\n      alert(\"Please enter text to find.\");\n      return;\n    }\n    const newText = text.replaceAll(findText, replaceText);\n    setText(newText);\n    alert(\n      `All occurrences of \"${findText}\" have been replaced with \"${replaceText}\".`\n    );\n  };\n\n  const handleTitleCaseClick = () => {\n    let newText = text\n      .toLowerCase()\n      .split(\" \")\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(\" \");\n    setText(newText);\n  };\n\n  const handleClearClick = () => {\n    setText(\"\");\n  };\n\n  const handleCopyClick = () => {\n    let textArea = document.getElementById(\"exampleFormControlTextarea1\");\n    textArea.select();\n    navigator.clipboard.writeText(textArea.value);\n  };\n\n  const handleCapitalizeClick = () => {\n    let newText = text\n      .toLowerCase()\n      .split(\" \")\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(\" \");\n    setText(newText);\n  };\n\n  const handleExtraSpace = () => {\n    let newText = text.split(/[ ]+/).join(\" \");\n    setText(newText);\n  };\n\n  // download file\n  // const handleDownloadClick = () => {\n  //   const filename = \"downloaded_text.word\";\n  //   downloadStyledTextFile(filename, text);\n  // };\n\n  // const handleFontStyleChange = (event) => {\n  //   setFontStyle(event.target.value);\n  // };\n\n  // const downloadStyledTextFile = (filename, text, fontStyle) => {\n  //   const blob = new Blob([text], { type: \"text/plain\" });\n  //   const link = document.createElement(\"a\");\n  //   link.download = filename;\n  //   link.href = window.URL.createObjectURL(blob);\n  //   link.style.fontFamily = fontStyle;\n  //   link.click();\n  //   window.URL.revokeObjectURL(link.href);\n  // };\n\n  const handleScrambleWordsClick = () => {\n    let newText = text\n      .split(\" \")\n      .sort(() => Math.random() - 0.5)\n      .join(\" \");\n    setText(newText);\n  };\n\n  const handleRemoveNumbersClick = () => {\n    let newText = text.replace(/\\d+/g, \"\");\n    setText(newText);\n  };\n\n  const handleRepeatedWordsClick = () => {\n    const words = text.toLowerCase().split(/\\s+/);\n    const wordCounts = words.reduce((acc, word) => {\n      acc[word] = (acc[word] || 0) + 1;\n      return acc;\n    }, {});\n    const repeatedWords = Object.entries(wordCounts)\n      .filter(([word, count]) => count > 1)\n      .map(([word]) => word);\n    alert(`Repeated Words: ${repeatedWords.join(\", \") || \"None\"}`);\n  };\n\n  const handleRepeatedCharactersClick = () => {\n    const charCounts = text.split(\"\").reduce((acc, char) => {\n      acc[char] = (acc[char] || 0) + 1;\n      return acc;\n    }, {});\n    const repeatedChars = Object.entries(charCounts)\n      .filter(([char, count]) => count > 1)\n      .map(([char]) => char);\n    alert(`Repeated Characters: ${repeatedChars.join(\", \") || \"None\"}`);\n  };\n\n  const handleSortWordsClick = (order) => {\n    let words = text.split(/\\s+/).filter((word) => word.length > 0); // Split and remove extra spaces\n    if (order === \"asc\") {\n      words.sort((a, b) => a.localeCompare(b)); // Ascending order\n    } else if (order === \"desc\") {\n      words.sort((a, b) => b.localeCompare(a)); // Descending order\n    }\n    setText(words.join(\" \")); // Join the sorted words back into a string\n  };\n\n  const handleSpeakClick = () => {\n    if (\"speechSynthesis\" in window) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = \"en-US\"; // Set language\n      utterance.rate = 1; // Set speed (0.5 = slower, 1 = normal, 2 = faster)\n      window.speechSynthesis.speak(utterance);\n    } else {\n      alert(\"Text-to-Speech is not supported in this browser.\");\n    }\n  };\n\n  const calculateCounts = (text) => {\n    const charCount = text.length;\n    const wordCount = text\n      .split(/\\s+/)\n      .filter((word) => word.length > 0).length;\n    const sentenceCount = text\n      .split(/[.!?]+/)\n      .filter((sentence) => sentence.trim().length > 0).length;\n    const lineCount = text.split(/\\n/).length;\n    return { charCount, wordCount, sentenceCount, lineCount };\n  };\n\n  const { charCount, wordCount, sentenceCount, lineCount } =\n    calculateCounts(text);\n\n  // Image to WebP Handlers\n  // const handleFileChange = (event) => {\n  //   const file = event.target.files[0];\n  //   if (!file) {\n  //     alert(\"Please select an image file.\");\n  //     return;\n  //   }\n  //   setSelectedFile(file);\n  //   setImageName(file.name.split(\".\")[0]);\n  // };\n\n  // const handleConvert = () => {\n  //   if (!selectedFile) {\n  //     alert(\"No file selected. Please choose a file to convert.\");\n  //     return;\n  //   }\n  //   convertImageToWebP(selectedFile);\n  // };\n\n  // const convertImageToWebP = (file) => {\n  //   const reader = new FileReader();\n  //   const img = new Image();\n\n  //   reader.onload = (e) => {\n  //     img.src = e.target.result;\n  //   };\n\n  //   img.onload = () => {\n  //     const canvas = document.createElement(\"canvas\");\n  //     const ctx = canvas.getContext(\"2d\");\n  //     canvas.width = img.width;\n  //     canvas.height = img.height;\n  //     ctx.drawImage(img, 0, 0);\n\n  //     canvas.toBlob(\n  //       (blob) => {\n  //         if (blob) {\n  //           setConvertedWebP(URL.createObjectURL(blob));\n  //         } else {\n  //           alert(\"Failed to convert image to WebP.\");\n  //         }\n  //       },\n  //       \"image/webp\",\n  //       0.8\n  //     );\n  //   };\n\n  //   reader.readAsDataURL(file);\n  // };\n\n  // const downloadWebP = () => {\n  //   const link = document.createElement(\"a\");\n  //   link.href = convertedWebP;\n  //   link.download = `${imageName}.webp`;\n  //   link.click();\n  // };\n\n  return (\n    <>\n      <div className=\"container\">\n        <h1>{props.heading}</h1>\n        <div className=\"mb-3\">\n          <textarea\n            className=\"form-control\"\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n            // style={{ fontFamily: fontStyle }}\n            id=\"exampleFormControlTextarea1\"\n            rows=\"8\"\n          ></textarea>\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"findText\" className=\"form-label\">\n            Find:\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"findText\"\n            value={findText}\n            onChange={(e) => setFindText(e.target.value)}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"replaceText\" className=\"form-label\">\n            Replace With:\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"replaceText\"\n            value={replaceText}\n            onChange={(e) => setReplaceText(e.target.value)}\n          />\n        </div>\n        <button\n          className=\"btn btn-primary mx-2 my-2\"\n          onClick={handleFindAndReplaceClick}\n        >\n          Find and Replace\n        </button>\n        <div className=\"mb-3\">\n          <label htmlFor=\"loremParagraphs\" className=\"form-label\">\n            Number of Paragraphs:\n          </label>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            id=\"loremParagraphs\"\n            placeholder=\"Enter number of paragraphs\"\n            min=\"1\"\n            onChange={(e) => setParagraphCount(e.target.value)}\n          />\n        </div>\n        <button\n          className=\"btn btn-primary mx-2 my-2\"\n          onClick={() => handleGenerateLoremIpsumClick(paragraphCount || 1)}\n        >\n          Generate Lorem Ipsum\n        </button>\n        {/* <div className=\"mb-3\">\n          <label htmlFor=\"fontStyleSelect\">Choose font style:</label>\n          <select\n            id=\"fontStyleSelect\"\n            onChange={handleFontStyleChange}\n            className=\"form-select\"\n          >\n            <option value=\"cursive\">Cursive</option>\n            <option value=\"Arial\">Arial</option>\n            <option value=\"Times New Roman\">Times New Roman</option>\n            <option value=\"Verdana\">Verdana</option>\n            <option value=\"Monospace\">Monospace</option>\n          </select>\n        </div> */}\n        \n        <div className=\"mb-3\">\n  <label htmlFor=\"languageSelect\" className=\"form-label\">\n    Select Target Language:\n  </label>\n  <select\n    id=\"languageSelect\"\n    className=\"form-select\"\n    value={targetLanguage}\n    onChange={(e) => setTargetLanguage(e.target.value)}\n  >\n    <option value=\"es\">Spanish</option>\n    <option value=\"fr\">French</option>\n    <option value=\"de\">German</option>\n    <option value=\"hi\">Hindi</option>\n    <option value=\"zh\">Chinese</option>\n  </select>\n</div>\n<button className=\"btn btn-primary mx-2 my-2\" onClick={handleTranslateClick}>\n  Translate Text\n</button>\n<button className=\"btn btn-primary mx-2 my-2\" onClick={handleUpClick}>\n          Convert to Uppercase\n        </button>\n        <button className=\"btn btn-primary mx-2 my-2\" onClick={handleLoClick}>\n          Convert to Lowercase\n        </button>\n        <button\n          className=\"btn btn-primary mx-2 my-2\"\n          onClick={handleTitleCaseClick}\n        >\n          Convert to Title Case\n        </button>\n        <button\n          className=\"btn btn-primary mx-2 my-2\"\n          onClick={handleScrambleWordsClick}\n        >\n          Scramble Words\n        </button>\n        <button\n          className=\"btn btn-primary mx-2 my-2\"\n          onClick={handleRemoveNumbersClick}\n        >\n          Remove Numbers\n        </button>\n        <button\n          className=\"btn btn-primary mx-2 my-2\"\n          onClick={handleCapitalizeClick}\n        >\n          Capitalize Case\n        </button>\n        <button\n          className=\"btn btn-primary mx-2 my-2\"\n          onClick={handleRepeatedWordsClick}\n        >\n          Find Repeated Words\n        </button>\n        <button\n          className={`btn ${\n            isListening ? \"btn-danger\" : \"btn-primary\"\n          } mx-2 my-2`}\n          onClick={handleSpeechToTextClick}\n        >\n          {isListening ? \"Listening...\" : \"Start Speech-to-Text\"}\n        </button>\n        <button\n          className=\"btn btn-primary mx-2 my-2\"\n          onClick={() => handleSortWordsClick(\"asc\")}\n        >\n          Sort Words (Ascending)\n        </button>\n        <button\n          className=\"btn btn-primary mx-2 my-2\"\n          onClick={() => handleSortWordsClick(\"desc\")}\n        >\n          Sort Words (Descending)\n        </button>\n        <button\n          className=\"btn btn-primary mx-2 my-2\"\n          onClick={handleRepeatedCharactersClick}\n        >\n          Find Repeated Characters\n        </button>\n        <button\n          className=\"btn btn-primary mx-2 my-2\"\n          onClick={handleClearClick}\n        >\n          Clear text\n        </button>\n        <button\n          className=\"btn btn-primary mx-2 my-2\"\n          onClick={handleExtraSpace}\n        >\n          Remove Extra Spaces\n        </button>\n        <button className=\"btn btn-primary mx-2 my-2\" onClick={handleCopyClick}>\n          Copy to Clipboard\n        </button>\n        <button\n          className=\"btn btn-primary mx-2 my-2\"\n          onClick={handleSpeakClick}\n        >\n          Speak Text\n        </button>\n        {/* <button\n          className=\"btn btn-primary mx-2 my-2\"\n          onClick={handleDownloadClick}\n        >\n          Download text\n        </button> */}\n        <div className=\"container my-3\">\n          <h1>Your text summary</h1>\n          <p>\n            Character Count: {charCount} | Word Count: {wordCount} | Sentence\n            Count: {sentenceCount} | Line Count: {lineCount}\n          </p>\n          <p>{0.008 * text.split(\"\").length} minutes read</p>\n          {/* <h3 style={{ fontFamily: fontStyle }}>{text}</h3> */}\n        </div>\n\n        {/* <div className=\"container my-4\">\n          <h2>Image to WebP Converter</h2>\n          <input\n            type=\"file\"\n            accept=\"image/png, image/jpeg, image/svg+xml\"\n            className=\"form-control my-4 mx-4 \"\n            onChange={handleFileChange}\n          />\n          <button className=\"btn btn-primary mx-2 my-2\" onClick={handleConvert}>\n            Convert to WebP\n          </button>\n          {convertedWebP && (\n            <>\n              <img src={convertedWebP} alt=\"Converted WebP\" className=\"img-fluid\" />\n              <button className=\"btn btn-success my-2 mx-2\" onClick={downloadWebP}>\n                Download WebP\n              </button>\n            </>\n          )}\n        </div> */}\n      </div>\n    </>\n  );\n}\n","/* eslint-disable no-const-assign */\n/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n// import About from './Components/About'; // Remove if not used\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\n// import ImageToWebPConverter from './Components/ImageToWebPConverter'; // Corrected the component name\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n// import AdvancedImageConverter from './Components/ImageToWebPConverter';\nfunction App() {\n  const [mode, setMode] = useState('dark'); // Corrected mode state initialization to lowercase\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'black';\n      document.body.style.color = 'white'; // Change text color for dark mode\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black'; // Change text color for light mode\n    }\n  };\n\n  // Set initial background color and text color based on the mode\n  useEffect(() => {\n    document.body.style.backgroundColor = mode === 'dark' ? 'black' : 'white';\n    document.body.style.color = mode === 'dark' ? 'white' : 'black';\n  }, [mode]);\n\n  return (\n    <>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <div className=\"container my-3\">\n        <TextForm heading=\"Enter the text to Analyze below\" />\n        {/* <ImageToWebPConverter /> */}\n        {/* <AdvancedImageConverter /> */}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}